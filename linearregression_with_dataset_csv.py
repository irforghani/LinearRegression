# -*- coding: utf-8 -*-
"""LinearRegression_with_dataset_csv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yp67mGOPP1CAcn4RTdaWBngN7_h2TlQ1

![alt text](http://icee2017.kntu.ac.ir:81/files_site/sponsorfn_pic/r_83_161103171713.png)

# Linear Regression with SkLearn (CSV Dataset File Input)

## Ali Forghani ElahAbadi
## Kharazmi University, Tehran, IRAN

### Python Language (version 3.6)
"""

# -*- coding: utf-8 -*-
"""
Created on Sat Oct 27 03:14:50 2018

@author: Ali Forghani
"""
#import library
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from random import gauss
import pandas as pd
import random

from google.colab import drive
drive.mount('/content/drive/')

#read  csv file
db = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Dataset.csv')

#preprocessing
x = db.iloc[:, 0]
y = db.iloc[:, 3]

print(x)
print(y)



plt.style.use('seaborn') # pretty matplotlib plots
plt.rcParams['figure.figsize'] = (12, 8)


x = np.asarray(x)
y = np.asarray(y)
    
x = x.reshape(-1, 1)
y = y.reshape(-1, 1)

#plot raw data
plt.scatter(x, y)
plt.xlabel('x')
plt.ylabel('y')
plt.show()
print('-----------------------'+str(x.shape))

#split train and test
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.1 , random_state = 0)
print ("*************Trainnin data****************")
print ("X train shape : " ,X_train.shape)
print ("y train shape : " ,y_train.shape)

print ("*************Testing data******************")
print ("X test shape : " ,X_test.shape)
print ("y test shape : " ,y_test.shape)

# Fitting Simple Linear Regression to the Training set
regressor = LinearRegression()
regressor.fit(X_train, y_train)
print("Function for the first Graph") 
m = regressor.coef_[0]
b = regressor.intercept_
print(' y = {0} * x + {1}'.format(m, b))

for i in range(1, 4):
    print('y output with x=' + str(i) + ' : ')
    print((m * i) + b)

# Predicting the Test set results
y_pred = regressor.predict(X_test)
print (y_pred)

#Visualising the Training set results
 
plt.scatter(X_train, y_train, color = 'blue', s = 10)
plt.plot(X_train, regressor.predict(X_train), color = 'red')

plt.title('S')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend(('Regression Line','Train data'),
           loc='upper center', shadow=True, frameon=True)
plt.show()

# Visualising the Test set results
plt.scatter(X_test, y_test, color = 'blue')
plt.plot(X_train, regressor.predict(X_train), color = 'red')
plt.title('S')
plt.xlabel('X')
plt.ylabel('Y')
plt.legend(('Regression Line','Test data'),
           loc='upper center', shadow=True, frameon=True)


plt.show()

#calculate errors
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))